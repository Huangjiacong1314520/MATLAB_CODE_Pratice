%定义函数
%定义域 和 增量  [start:interval:end]
%plot(x,y)


%% plot和fplot的区别
% `plot` 和 `fplot` 都是Matlab中用于绘图的函数，但它们各有特点和适用场景。
% 
% 1. **plot**:
%    - `plot`函数主要用于绘制离散数据点或将多个数据点连接起来形成一条线。
%    - 它需要至少两个参数，通常是两个向量，一个表示x坐标，另一个表示y坐标。
%    - 可以用来绘制线性图、散点图等。
%    - 例子: `plot(x, y)` 会将向量 `x` 和 `y` 中的数据点按顺序连接起来。
% 
% 2. **fplot**:
%    - `fplot`函数用于绘制函数的图像。
%    - 它接受一个函数句柄（即函数的名称或匿名函数）和一个定义域区间作为输入参数，然后自动在这个区间内计算并绘制函数的图像。
%    - `fplot`自动调整绘图的分辨率和绘制区间，以便更好地展示函数的特点。
%    - 调用fplot：fplot('function string',[xstart,xend])
%    - 例子: `fplot(@(x) sin(x), [-pi, pi])` 会在区间 \([-π, π]\) 内绘制正弦函数的图像。
%警告: 在以后的版本中，fplot 将不接受字符向量或字符串输入。请改用 fplot(@(t)exp(-2.*t).*sin(t))
fplot('exp(-2*t)*sin(t)',[0,4])
% 总的来说，当你想要绘制一组特定数据点或将它们连接起来时，`plot`是更适合的选择。而当你需要绘制一个函数的图像，特别是当函数形式复杂或者你想要在一个特定的区间内自动获得更平滑的曲线时，`fplot`会是更好的选择。

% 定义x和y数据点
x = 1:10; % 从1到10的整数
y = 2*x; % y是x的两倍，表示线性关系

% 使用plot函数绘制图形
%在这段代码中，plot函数用来绘制由向量x和y定义的数据点。选项'-o'指定了线型和标记符号，表示用圆圈(o)标记每个数据点，并用直线连接。
% LineWidth、MarkerSize、MarkerEdgeColor和MarkerFaceColor选项用来自定义线条宽度、标记大小和颜色等属性。
plot(x, y, '-o', 'LineWidth', 2, 'MarkerSize', 8, 'MarkerEdgeColor', 'r', 'MarkerFaceColor', [1,0.5,0]);
%% 添加标签和标题

% 添加图形标题和轴标签
title('简单线图示例');
xlabel('x轴');
ylabel('y轴');

% 显示网格
grid on;


%% 坐标轴命令
% 在MATLAB中，坐标轴命令用于设置和修改图形中坐标轴的属性和外观。这些命令可以帮助你更好地控制图形的呈现，让图形更加清晰和美观。以下是一些常用的坐标轴命令和解释：
% 
% 1. **axis**:
%    - 用于设置坐标轴的范围和比例。
%    - 语法：
%      ```matlab
%      axis([xmin xmax ymin ymax]) % 设置2D图形的x和y轴范围
%      axis([xmin xmax ymin ymax zmin zmax]) % 设置3D图形的x, y和z轴范围
%      axis equal % 设置坐标轴的单位比例相等
%      axis tight % 根据数据设置坐标轴范围
%      axis off % 隐藏坐标轴
%      axis on % 显示坐标轴
%      ```
% 
% 2. **xlim, ylim, zlim**:
%    - 用于单独设置x、y和z轴的范围。
%    - 语法：
%      ```matlab
%      xlim([xmin xmax]);
%      ylim([ymin ymax]);
%      zlim([zmin zmax]);
%      ```
% 
% 3. **grid**:
%    - 用于显示或隐藏坐标轴网格线。
%    - 语法：
%      ```matlab
%      grid on; % 显示网格线
%      grid off; % 隐藏网格线
%      grid minor; % 显示次要网格线
%      ```
% 
% 4. **xlabel, ylabel, zlabel**:
%    - 用于设置x、y和z轴的标签。
%    - 语法：
%      ```matlab
%      xlabel('x轴标签');
%      ylabel('y轴标签');
%      zlabel('z轴标签');
%      ```
% 
% 5. **title**:
%    - 用于设置图形的标题。
%    - 语法：
%      ```matlab
%      title('图形标题');
%      ```
% 
% 6. **legend**:
%    - 用于添加图例，解释图中不同线条或数据点的含义。
%    - 语法：
%      ```matlab
%      legend('数据1', '数据2', '数据3');
%      ```
% 
% 7. **set(gca, 'PropertyName', PropertyValue)**:
%    - 用于设置当前坐标轴的属性。
%    - 语法：
%      ```matlab
%      set(gca, 'XColor', 'r'); % 设置x轴颜色为红色
%      set(gca, 'YDir', 'reverse'); % 反转y轴方向
%      set(gca, 'FontSize', 12); % 设置字体大小
%      ```
% 
% 8. **gca**:
%    - 获取当前坐标轴对象的句柄，用于进一步修改其属性。
%    - 示例：
%      ```matlab
%      ax = gca;
%      ax.XColor = 'r'; % 设置x轴颜色为红色
%      ax.YDir = 'reverse'; % 反转y轴方向
%      ```
% 
% ### 示例代码
% 
% 下面是一个综合示例，演示了如何使用这些命令设置和定制MATLAB图形的坐标轴：
% 
% ```matlab
% % 定义数据
% x = linspace(-2*pi, 2*pi, 100);
% y = sin(x);
% 
% % 绘制图形
% plot(x, y, 'b-', 'LineWidth', 2);
% 
% % 设置坐标轴范围
% axis([-2*pi 2*pi -1.5 1.5]);
% 
% % 设置x轴和y轴标签
% xlabel('x轴');
% ylabel('y轴');
% 
% % 设置图形标题
% title('正弦函数图像');
% 
% % 显示网格线
% grid on;
% 
% % 设置图例
% legend('sin(x)');
% 
% % 获取当前坐标轴对象并设置属性
% ax = gca;
% ax.XColor = 'r'; % 设置x轴颜色为红色
% ax.YColor = 'b'; % 设置y轴颜色为蓝色
% ax.FontSize = 12; % 设置字体大小
% ```
% 
% 通过上述示例，你可以看到如何使用MATLAB中的坐标轴命令来定制图形的外观。这些命令可以帮助你创建更加专业和美观的图形。

%% 在同一图象中显示多个函数，并使用不同的线型
% 在MATLAB中，你可以使用`plot`函数来绘制实线和虚线图。通过指定不同的线型参数，可以轻松地绘制各种类型的线条。下面是一些常用的线型参数：
% 
% - `'-'`：实线
% - `'--'`：虚线
% - `':'`：点线
% - `'-.'`：点划线
% 
% ### 示例代码
% 
% 下面是一个示例，演示如何在同一图中绘制实线和虚线：
% 
% ```matlab
% % 定义x数据点
% x = linspace(0, 2*pi, 100);
% 
% % 定义y数据点
% y1 = sin(x); % 正弦函数
% y2 = cos(x); % 余弦函数
% 
% % 绘制正弦函数的实线图
% plot(x, y1, '-', 'LineWidth', 2); % 实线
% hold on; % 保持当前图形，以便在同一图中添加其他线条
% 
% % 绘制余弦函数的虚线图
% plot(x, y2, '--', 'LineWidth', 2); % 虚线
% 
% % 添加图形标题和轴标签
% title('正弦函数和余弦函数图像');
% xlabel('x轴');
% ylabel('y轴');
% 
% % 添加图例
% legend('sin(x)', 'cos(x)');
% 
% % 显示网格
% grid on;
% 
% % 停止在当前图形上添加其他线条
% hold off;
% ```
% 
% ### 解释
% 
% 1. **linspace**：
%    - `x = linspace(0, 2*pi, 100)`生成从0到2π的100个均匀分布的点，用于绘制函数图像。
% 
% 2. **定义函数**：
%    - `y1 = sin(x)`计算正弦函数的y值。
%    - `y2 = cos(x)`计算余弦函数的y值。
% 
% 3. **绘制实线**：
%    - `plot(x, y1, '-', 'LineWidth', 2)`绘制正弦函数的实线图，`'-'`表示实线，`'LineWidth', 2`设置线宽为2。
% 
% 4. **保持当前图形**：
%    - `hold on`命令使得可以在同一图中添加其他线条。
% 
% 5. **绘制虚线**：
%    - `plot(x, y2, '--', 'LineWidth', 2)`绘制余弦函数的虚线图，`'--'`表示虚线，`'LineWidth', 2`设置线宽为2。
% 
% 6. **添加标题和标签**：
%    - `title('正弦函数和余弦函数图像')`设置图形标题。
%    - `xlabel('x轴')`设置x轴标签。
%    - `ylabel('y轴')`设置y轴标签。
% 
% 7. **添加图例**：
%    - `legend('sin(x)', 'cos(x)')`添加图例，用于区分不同的线条。
% 
% 8. **显示网格**：
%    - `grid on`显示网格线，使图形更易读。
% 
% 9. **停止添加线条**：
%    - `hold off`命令停止在当前图形上添加其他线条。
% 
% 通过这些步骤，你可以在MATLAB中轻松绘制实线和虚线图，并添加适当的标签和图例以提高图形的可读性。


